- rendering vs mounting
	- component 가 처음 rendering 될때 mount 과정을 거침
	- 그러나 state 가 변경되어 rendering 될때는 mount 과정을 거치지않음

- useEffect(()=> {})					/rendering 될때마다 실행		
	- useEffect 실행되는 condition을 제한하고싶다면: dependency array
	- useEffect(()=>{}, [])				/empty array: 맨처음 rendering 됬을때 오직 한번
	- useEffect(()=>{}, [count])		/count 가 rendering 됬을때 + value 가 바뀌었을때
	- useEffect 마무리하고싶을땐 return ()=>{
		clearInterval(timer)  
	}

- useRef: const ref = useRef(value)			/훅을쓰면 {current: value} 이런 object 로 반환됨 / cold inlet 
	- state 가 너무 자주바뀌어서 rendering 이 자주되면 성능에 안좋기때문에 ref 씀
	- ref 값은 다른 state 에의해 rendering 되어도 value 가 유지됨				/var 은 rendering 하면 다시 초기화됨
	- component 의 attribute 에 ref 추가하면 current 에 모든 component 정보가 추가되고,
		useEffect 에서 inputRef.current.focus() 할수있음
	- putting arrow function into ref attribute: 

- useContext: share globally used data with every component 		/props drilling 필요없음
	- use only when you really need inputRef			
		- useContext make it hard to reuse component
		- if props drilling is only reason, consider using component composition first

- useMemo: const name = useMemo(()=> {return}, [])		/ 시간이 오래걸리는 state 를 value 가 변할때만 실행시키고싶을때 사용
		- useMemo(()=> {}, [])			/ dependency array 에 들어간 state 에 value 가 변할경우 실행 (필요할때만 실행)
		- object 가 렌더링될때	   		/ object 는 rendering 될때마다 주소값이 바뀌어서 useEffect 실행안됨: 이때 useMemo

- useCallback: 							/ useMemo 는 rendering 될때 기존 state value 를 유지하지만 useCallback 은 function Object 를 유지함
		- JS 에서 function 은 object 이고 rendering 될때마다 object 의 새로운주소값이 변수에 할당됨: memory waste

- useReducer:		